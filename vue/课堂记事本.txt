v-on:事件名称.修饰符
缩写@：作用在组件上就是自定义事件的意思，作用在dom元素上就是dom事件，可以通过.native修饰符作用在组件上的时候就是dom事件
@click.native="cons"



什么是路由？
可以打开网站的url地址，url的组成 host:80/path  域名：端口号：地址（路由），
路由的概念本身是诞生于后端（服务端），可以通过定义路由的形式，指定当前url的长度，以及对应需要渲染的页面


什么是前端路由？


前后端分离？
现在前端的开发场景有两种，webpage开发，前后端分离
webpage开发：前端提供.html为后缀的html代码，后端根据他们的语言把html后缀进行修改（.php,.jsp,ejs）,开始使用后端的语言对页面进行遍历输出。（这样的开发模式引来的问题就是，分工不明确）
前后端分离：后天再也不需要关心你的结构是什么样的，样式是什么样，只需要提供数据接口，剩下的就是前端开始做接口的请求，数据的渲染，业务逻辑的开发（前后端沟通虽然不需要再纠结结构和样式了，但是新的问题是需要和后端沟通方便的数据结构）


什么是前端路由？
由前端控制路由地址，在前端实现通过路由的形式加载对应的页面，不需要向后端发起请求，前端通过改变url地址，然后监听url地址的变化，开始新的url渲染，异步的形式

前端路由的两种形式   hash模式，history模式，目前只有两种
hash:www.baidu.com/#aaa  使用#作为url的hash值，#在之前的定义是锚点连接，改变不会像后端发起请求，也可以通          hashchange事件监听到hash的改变
history:html5新增的api

vue路由的规则
实例化vue-router传入一个配置对象
配置对象

routes:[
   {
        path:""//路径
        name:""//路由名称
        redirect:""//路由重定向
        component://路由对应需要渲染的组件，组件会渲染到页面中router-view组件对应的位置
        children:[
	如果使用二级路由的话需要在一级路由里面定义router-view
        ]
   }
]

vue-router会将路由路径对应的组件渲染到页面中对应的router-view所在位置

mode:"history/hash"//模式选择 hash history   #/path:是hash   /path:是history

组件的划分：
路由组件（容器组件）：路由对应的组件，用作路由渲染，主要就是在里面通知组合不同的展示组件，已经业务组件
展示组件：纯用做UI展示的组件，不涉及到任何逻辑操作，大部分可以复用
业务组件：针对不同的业务需求做的不同的逻辑操作

路由传参：
两种形式：params,query
params传递的参数和路由连在一起
	定义：/path/path/:paramsName/:paramsName/path/:paramsName
	打开的url:/path/path/1/1/path/1值是包含在路径中
	传递：（组件式，编程式）
		第一种：/path/path/1/1/path/1 直接写路径
		二种方式：router-link组件中to属性（或者$router里面的push方法）的值是一个对象的话{name:path,params:{id:data.id}}
所以params的试用场景是
	
	参数个数必须是已知的
	只能传递简单的参数值，简单字符串，数字
	传递少量的数据
query就是url的正常参数传递url?参数 =值&参数=值&......
	参数个数没有限制
	再组件内部通过$route.query获取

$route是路由信息对象，$router是路由实例，$route使用$router里面一个熟悉的映射


//路由拦截，也叫导航守卫，或路由的生命周期函数，beforeEach 路由跳转前的回调，需要调用next()才能继续渲染

//to:即将要进入的目标 路由对象

//from:当前导航正要离开的路由

//next:一定要调用该方法来resolve这个钩子，执行效果依赖next方法的调用参数


router.beforeEach((to,from,next)=>{
 
	const isLoginArr=["User","ProductDetail"]

	if(isLoginArr.indexOf(to.name)!=-1){
   
		if(window.localStorage.getItem("user")){
     
			next()
    
		}else{
      
			next("/login")
    
		}
  
	}else{
    
		next();
  
	}
  

})

组件内的守卫只能是定义在当前路由对应的路由组件中
beforeRouteEnter 进入当前路由的时候
beforeRouteUpdate 改变当前路由参数的时候,类似于watch 里面的 $route
beforeRouteLeave 

vuex
什么是状态？
当前样子，可以发生变化，开始的状态，结束的状态

什么是状态管理？
让状态以一定形式定义，一定的形式改变，一定的形式获取，提供一个规则


Vuex是什么？
是专门针对vue提供的状态管理模式
它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
vueX 也集成到Vue的官方调式工具 devtools extension ,提供了诸如零配置的time-travel调试，状态块照导入导出等高级调试功能

为什么要使用Vuex?
为了更好的管理状态，在之前组件内部状态的应用中发现，每个组件的状态都是独立的 ，如果存在好多组件公用的状态通讯起来比较麻烦
vuex的出现，他是将所有数据状态集中式存储管理，变成了一个组件中以相应的规则去读取改变


有什么能够代替vuex，但是为什么不用？
可以使用redux或者将数据定义在vue根实例中，或者定义全局变量
redux:他并不是针对vue专门做处理的，无法同步状态和视图之间的转换
vue根实例:因为vue根实例的定义是整个应用程序，而不是数据管理
全局变量：var store = {},没有规则，无法同步状态和视图之间的转换

单行数据流：状态（state）到视图（view）数据的改变（actions）





前后端分离
后端负责接口的开发
前端通过ajax调用后端的接口，将返回的数据渲染到页面

如何和后端交互？
通过ajax请求，请求后端的接口得到返回数据，后端会提供接口文档，而过程中可能会出现一些问题（接口的报错）

接口是如何开发的？
后端开发的，通过后端语言进行接口的开发（php,java,net,....）,前端也提供服务端操作的技术nodejs


使用nodejs做一个接口的开发

1、全局安装   cnpm i express-generator -g
2、用express server命令生成一个文件夹
3、cnpm i 在起服务 npm run start  浏览器 localhost：3000




restful api
1、统一规范的接口地址
2、统一规范的接口类型（GET,POST,PUT,PATCH,DELETE）
3、统一的返回状态
	2xxx:成功请求
	4xxx:客户端错误
	5xxx:服务端错误
4、统一的错误返回格式
	{
		name："错误名称代码"，
		message:"错误的具体消息"，
		code：0
	}



常用的HTTP动词有五个

GET ：从服务器取出资源（一项或多项）
POST : 在服务器新建一个资源
PUT : 在服务器更新资源（客户端提供改变的完整资源）
PATCH:在服务器更新资源（客户端提供改变的属性）
DELETE:从服务器删除资源


过滤信息
?limit=10 指定返回记录的数量
?offset=10 指定返回记录的开始位置
?page=2&per_page=100 指定第几页，以及每页的记录数
？sortby=name&order=asc 指定返回结果按照那个属性排序，以及排序顺序
？animal_type_id=1 指定筛选条件




状态码
200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
204 NO CONTENT - [DELETE]：用户删除数据成功。
400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。
404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。



请求格式规范
目前请求的内容的编码仅支持UTF-8,内容格式为json ,所有公用参数都作为请求头，包含的公用请求头有
Accept:必填，接口返回数据的格式，默认为json
	application/json
	application/xml
Content-Type:必填（有请求体时），请求内容格式，目前固定为：application/json;
charset=utf-8
x-Request-Time:必填，发起请求时的时间戳，单位秒
x-Request-Nonce:必填，随机数，每次请求必须唯一，长度在36位之内，推荐UUID
Authorization:必填，请求的验证TOKEN


跨域
什么是跨域？
跨域是指一个域下的文档或脚本视图去请求另一个域下的资源，这里跨域是广义的

什么是同源策略？
协议+域名+端口三者相同，即便两个不同的域名指向同一个ip地址，也非同源（只存在于客户端（浏览器））

同源策略限制以下几种行为：
1）cookie,LocalStorage和IndexDB无法读取
2）DOM和Js对象无法获得
3）AJAX请求不能发送


跨域解决方案
1、cors(跨域资源共享)
2、jsonp
3、iframe
4、nginx代理跨域
5、nodejs中间件代理跨域
6、WebSocket协议跨域


jsonp的实现原理
jsonp就是利用了请求js不涉及跨域的特性，以及js是浏览器脚本语言的特性，动态生成script标签，指定url为接口地址，
并且创建一个不会冲突的函数添加到window上，前端通过query参数将回调函数的名称传递到后端，后端获取到名字，返回的内容就会执行js的形式返回方法名（数据）

缺点：只能是get请求，不能是post
        不安全
        需要后端配合



cors跨域资源共享


cors浏览器新增的跨域解决方案，需要客户端和服务端同时支持
客户端：（浏览器版本）
服务端：
//设置跨域访问  

app.all('*', function(req, res, next) {  //////////3
  
	 res.header("Access-Control-Allow-Origin", "*"); //允许跨域访问的网站 
  
	 res.header("Access-Control-Allow-Headers", "X-Requested-With");//允许的headers字段  
  	 	 res.header("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS");//允许的请求方法
  	 res.header("Access-Control-Allow-Crdentials",true)//允许携带cookie  
  
	 res.header("Content-Type", "application/json;charset=utf-8");  //接受到的内容格式
  
	 next(); 
 }); 

优点：前端不需要做任何改变，只需要后端配置即可
         可以限制域名做请求
         可以跨域操作cookie

缺点：兼容性问题





代理跨域（反向代理，正向代理）
首先跨域问题是出现在浏览器同源策略，所以在服务端做一个代理，将不同域名下的数据请求，然后在通过当前服务器返回到当前页面


在开发项目的时候如果是前后端分离，一定会有跨域问题
1、如果项目上线之后依然存在跨域问题（接口和前端项目分成了不同的服务器）
可以用cors,代理

2、开发的时候是跨域而上线部署后没有了跨域问题？
在开发的时候选用代理

3、浏览器兼容处理的时候
代理 、jsonp

在vue项目中可以用通过配置proxyTable来完成代理设置


cnpm i -g supervisor监听文件变化，自动刷新
使用：package.json 里配置"scripts": {
    "start": "node ./bin/www",
    "dev": "supervisor ./bin/www"
  },

Access-Control-Allow-*这类表示cors的头部信息



fetch的使用
//构造出Request对象
var req=new Request("https://api.github.com/repos/facebook/react",{
	method:"GET"
})

//发起请求，fatch方法返回一个Promise对象
fatch(req).then(function(res){
	//得到了response,这里调用response的json方法
	//该方法同样返回一个promise
	return res.json()
}).then(function(data){
	//得到解析后的对象
	console.log(data.stargazer_count)
})




vue中如何操作dom
1、ref作用到dom元素上，可以使用$refs获取到
2、在vue中操作dom必须写在mounted生命周期之后
3、在vuedom事件中，事件回调函数中的this指的不在是dom元素了，如果要获取dom需要使用e.target
4






elementUi
为了减少项目体积可以使用按需引入
借助babel-plugin-component
安装 babel-plugin-component：

然后，将 .babelrc 修改为：
{
  "presets": [["es2015", { "modules": false }]],
  "plugins": [
    [
      "component",
      {
        "libraryName": "element-ui",
        "styleLibraryName": "theme-chalk"
      }
    ]
  ]
}


接下来，如果你只希望引入部分组件，比如 Button 和 Select，那么需要在 main.js 中写入以下内容：
import Vue from 'vue';
import { Button, Select } from 'element-ui';
import App from './App.vue';

Vue.component(Button.name, Button);
Vue.component(Select.name, Select);
/* 或写为
 * Vue.use(Button)
 * Vue.use(Select)
 */

new Vue({
  el: '#app',
  render: h => h(App)
});

1、先下载element-ui
2、在main.js里面 （引入样式和框架注册）
	import elementUI from "element-ui"
；
	import "element-ui/lib/theme-chalk/index.css";
	Vue.use(elementUI)；






开发环境与运行环境的区别
工程目录的划分，与作用
单页面路由的原理
浅拷贝深拷贝
为什么使用vuex优缺点是什么
vue中操作dom的方法
多页面与单页面的区别，什么时候用多页面，什么时候用单页面
v-model 组件 dom
怎样打开新的标签页














marked.js
下载
https://


插件
1）定义插件
export default{
    install(Vue){
       Vue.prororype.$loading={//挂在到根组件
	
       }
    }
}



常见 linux 命令有哪些？

登录
入职之后，一般会有现有的用户名和密码给你，你拿来之后直接登录就行。运行 ssh name@server 然后输入密码即可登录。

目录操作
创建目录 mkdir <目录名称>
删除目录 rm <目录名称>
定位目录 cd <目录名称>
查看目录文件 ls ll
修改目录名 mv <目录名称> <新目录名称>
拷贝目录 cp <目录名称> <新目录名称>
文件操作
创建文件 touch <文件名称> vi <文件名称>
删除文件 rm <文件名称>
修改文件名 mv <文件名称> <新文件名称>
拷贝文件 cp <文件名称> <新文件名称>
文件内容操作
查看文件 cat <文件名称> head <文件名称> tail <文件名称>
编辑文件内容 vi <文件名称>
查找文件内容 grep '关键字' <文件名称>...



1
1
1
1
1
1
1
Sky123.Org
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
